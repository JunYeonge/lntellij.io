연관관계 메소드


영속성은 지속적으로 존재하거나 오랫동안 유지되는것을 의미한다.
소프트 웨어 개발에선 데이터를 오랫동안 저장하고 관리하는것을 의미
이를 통해 데이터의 지속성을 보장하고, 프로그램이 종료되어도 데이터를 계속 사용할 수 있게한다.
영속성은 데이터를 오랫동안 저장하고 관리하는 것을 의미합니다. 이를 통해 데이터의 지속성을 보장하고, 
프로그램이 종료되어도 데이터를 계속 사용할 수 있게 됩니다.

0731~ 쇼핑몰 
-회원기능 ( 회원 가입 , 회원 목록)
- 상품기능 ( 상품 등록  , 상품 목록)
- 주문기능 ( 상품 주문 , 주문 내역)

validation 의존성
- 스템의 정확성과 유효성을 검사하는 프로세스 또는 기술을 가리킵니다. 
  주로 데이터 입력, 처리, 저장 등의 과정에서 올바른 형식과 규칙을 준수하는지 
  확인하는 과정을 의미합니다.

tomcat

application.yml

@PersistenceContext
- 엔티티 매니저를 필드 레벨 또는 메서드 레벨에서 주입받을 수 있습니다.
   이를 통해 JPA에서 제공하는 데이터베이스 관련 작업들을 수행

@Rollback()
- 테스트가 종료된 후에 데이터베이스에 영향을 주지 않는다는 것을 보장할 수 있습니다. 
   이를 통해 테스트 간에 데이터의 격리를 유지하고, 테스트가 반복적으로 실행될 때마다
   동일한 조건에서 테스트를 수행할 수 있게 됩니다.
@Rollback(false)
- 테스트가 실행된 후에도 테스트 메서드에서 생성한 데이터가 데이터베이스에 남게 됩니다. 
  이를 통해 테스트가 데이터베이스에 실제로 영향을 주고, 테스트 결과를 확인하고자 할 때 
   사용할 수 있습니다.

@Embedded
- 엔티티 클래스에 다른 클래스를 포함시키면, 해당 클래스의 속성들이 엔티티의 속성으로  
  자동으로 매핑되어 데이터베이스에 저장됩니다.

@JsonIgnore
- 해당 필드가 JSON으로 변환될 때 무시되고, JSON 결과에 포함되지 않습니다.

@OneToMany()
-  엔티티에서 다른 엔티티들과의 일대다 관계를 설정하고, 이를 통해 부모 엔티티와
 자식 엔티티들 간의 관계를 맺을 수 있습니다.

@OneToMany(mappedBy = "member")
- 일대다 관계에서 "다(N)" 쪽의 엔티티에서 "일(1)" 쪽의 엔티티에 대한 연관관계를 맺습니다. 
   이렇게 함으로써 양방향 관계를 설정하게 됩니다.

@OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
- 일대다 관계에서 "다(N)" 쪽의 엔티티에서 "일(1)" 쪽의 엔티티에 대한 연관관계를 맺으며, 
  동시에 연관된 엔티티의 변경, 저장, 삭제 등의 동작을 관리할 수 있습니다.

@ManyToOne(fetch = FetchType.LAZY)
- 사용하면 연관된 엔티티를 실제로 사용할 때까지 데이터베이스에서 로딩을 지연시킵니다. 
   즉, 해당 엔티티를 처음으로 접근할 때 데이터베이스에서 데이터를 가져옵니다.

@ManyToOne(fetch = FetchType.EAGER)
- 연관된 엔티티를 즉시 로딩하며, ManyToOne 관계가 설정된 엔티티를 조회할 때 
   해당 연관 엔티티도 함께 데이터베이스에서 로딩됩니다.

JPA의 Cascade 란?
부모 엔티티가 저장(persist)될 때, 연관된 자식 엔티티들도 함께 저장됩니다.
부모 엔티티가 삭제(remove)될 때, 연관된 자식 엔티티들도 함께 삭제됩니다.
부모 엔티티의 변경(merge)이 일어날 때, 연관된 자식 엔티티들도 함께 변경됩니다.
부모 엔티티의 변경(refresh)이 일어날 때, 연관된 자식 엔티티들도 함께 변경됩니다.
부모 엔티티의 변경(detach)이 일어날 때, 연관된 자식 엔티티들도 함께 변경됩니다.

@NoArgsConstructor(access = AccessLevel.PROTECTED)
- 해당 클래스에 매개변수 없는 기본 생성자가 자동으로 생성되지만, 이 생성자의 
   접근 제어자가 protected로 지정되어 클래스 외부에서 직접 호출할 수 없게 됩니다.
(   Lombok을 사용하지 않는 경우에는 기본 생성자를 명시적으로 정의해주어야 합니다   )


 @Enumerated(EnumType.STRING)
    private OrderStatus status; 
- 엔티티 클래스의 status 필드가 Java의 enum 타입인 OrderStatus와 매핑될 때, @Enumerated(EnumType.STRING)을 
   사용하면 해당 enum 값이 문자열로 데이터베이스에 저장되게 됩니다.

@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
-  상속 관계에 있는 엔티티들을 하나의 테이블에 저장하고, 엔티티의 구분은 @DiscriminatorColumn으로 
   지정한 컬럼을 사용하여 구분하게 됩니다.

다대일관계
다대다 관계
일대다 , 다대일의 양방향 관계
다대일 양방향 관계

가변길이메서드??? ... Order파일 참고